package sentimental_sips.application.sentimentalsips.Model.Service;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import sentimental_sips.application.sentimentalsips.Model.DAO.UtenteDAO;
import sentimental_sips.application.sentimentalsips.Model.DAOImpl.UtenteDAOImpl;
import sentimental_sips.application.sentimentalsips.Model.Entity.Utente;
import java.io.IOException;
import java.sql.SQLException;
import java.util.regex.Pattern;
import org.mindrot.jbcrypt.BCrypt;

public class RegistrazioneService {

    // Declares a private variable called salt and assigns it a value generated by the BCrypt.gensalt method with a cost factor of 10
    // The salt is used in hashing algorithms to ensure that even if two users have the same password,
    // their hashed passwords will be different due to the unique salt value
    private String salt = BCrypt.gensalt(10);

    public void registrazione(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        // Retrieves the values of the email and password parameters from the request
        // These values are obtained from the form submitted by the user
        String email = request.getParameter("email");
        String password = request.getParameter("password");

        // Creates instances of the UtenteDAOImpl and RegistrazioneService classes
        // These classes are responsible for interacting with the database and performing validation tasks
        UtenteDAO utenteDAO = new UtenteDAOImpl();
        RegistrazioneService registrazioneService = new RegistrazioneService();

        // Calls methods of the RegistrazioneService instance to validate the email and password
        // These methods check if the email and password meet certain criteria, such as format and length
        boolean isEmailValid = registrazioneService.isValidEmail(email);
        boolean isPasswordValid = registrazioneService.isValidPassword(password);

        // Checks if both the email and password are valid
        // If they are, it proceeds with the logic inside the try block
        if (!isEmailValid && !isPasswordValid) {
            // If either the email or password is invalid (if isEmailValid or isPasswordValid is false),
            // it sets an error message
            request.setAttribute("errorMessage", "Invalid email or password");
            request.getRequestDispatcher("/View/registrazionePage.jsp").forward(request, response);
        }

        // Checks if the email already exists in the database using the UtenteDAO instance
        // If it doesn't exist, it creates a new Utente object,
        // sets its email, password and ruolo, and saves it to the database using the UtenteDAO instance
        // Then, it sets the email attribute of the request and forwards the request to a result page
        Utente utente = utenteDAO.findUtenteByEmail(email);

        if (utenteDAO.isEmailExists(email)) {
            if (!utente.getRuolo().equals("anonimo")){
                request.setAttribute("errorMessage", "Email already exists");
                // It sets an error message
                request.getRequestDispatcher("/View/registrazionePage.jsp").forward(request, response);
            }

        }

        // Creates a new object of the Utente class
        // This object represents a user
        if (utente == null) utente = new Utente();

        // Sets the email of the Utente instance to the provided email value
        utente.setEmail(email);

        // Calls the hashPassword method with the provided password as an argument
        // This method hashes the password for secure storage
        password = hashPassword(password);

        // Sets the password property of the utente object to the hashed password value
        utente.setPassword(password);

        // Sets the ruolo (role) property of the utente object to the string "utente"
        // This indicates the role of the user, which is "user"
        utente.setRuolo("utente");

        // Calls the saveUtente method of the utenteDAO object to save the utente object to the database
        // This persists the user information (email, hashed password, role) in the database
        try {
            utenteDAO.updateUtente(utente);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        // Adds the email to the request attribute
        // This allows the email to be accessed in the forwarded JSP pag
        request.setAttribute("email", email);

        // Forwards the request and response to the JSP page located at "/View/registrazioneRiuscitoPage.jsp"
        // This means the control is passed to this JSP page to generate the response,
        // which typically indicates successful registratio
        request.getRequestDispatcher("/View/registrazioneRiuscitoPage.jsp").forward(request, response);
    }

    // This method checks if the provided email is valid
    public boolean isValidEmail(String email) {

        // This method checks if the provided email is valid
        // A regular expression (regex) for validating email addresses.
        // It checks if the email contains alphanumeric characters, '+', '_', '.', or '-' before the '@' symbol,
        // followed by any character after the '@' symbol.
        String EMAIL_REGEX = "^[A-Za-z0-9+_.-]+@(.+)$";

        // Creates a Pattern object by compiling a regular expression stored in the EMAIL_REGEX variable
        // This Pattern object can then be used for matching email addresses against the defined pattern in EMAIL_REGEX
        Pattern pattern = Pattern.compile(EMAIL_REGEX);

        // It checks if the email is not null and if it matches the pattern
        // If both conditions are true, it returns true; otherwise, it returns false
        return email != null && pattern.matcher(email).matches();
    }

    // This method checks if the provided password is valid
    public boolean isValidPassword(String password) {

        // It compiles the PASSWORD_REGEX into a Pattern object
        // A regular expression (regex) for validating passwords
        // It checks if the password contains at least one digit (?=.*[0-9]),
        // at least one lower case letter (?=.*[a-z]),
        // at least one upper case letter (?=.*[A-Z]),
        // and is at least 8 characters long (.{8,})
        String PASSWORD_REGEX = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8,}$";

        // creates a Pattern object by compiling a regular expression stored in the PASSWORD_REGEX variable
        // This Pattern object can then be used for matching passwords against the defined pattern in PASSWORD_REGEX
        Pattern pattern = Pattern.compile(PASSWORD_REGEX);

        // It checks if the password is not null and if it matches the pattern
        // If both conditions are true, it returns true; otherwise, it returns false
        return password != null && pattern.matcher(password).matches();
    }

    // Method to hash a password
    // Takes a plain text password as input and returns the hashed password
    public String hashPassword(String password) {

        // BCrypt.hashpw method hashes the plain text password using the provided salt
        return BCrypt.hashpw(password, salt);
    }
}
